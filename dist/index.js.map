{"version":3,"file":"index.js","sources":["../src/shared/providers.tsx","../src/shared/utils.ts","../src/shared/i18n.ts","../src/modalVariant/constants.tsx","../src/modalVariant/utils.tsx","../src/shared/ProviderButton.tsx","../src/modalVariant/ProvidersModal.tsx","../src/modalVariant/index.tsx","../src/dropdownVariant/constants.ts","../src/dropdownVariant/util.tsx","../src/dropdownVariant/ProvidersMenu.tsx","../src/dropdownVariant/index.tsx","../src/component.tsx"],"sourcesContent":["import ArubaSVGUrl from '/./svgs/idp-logos/spid-idp-arubaid.svg';\nimport InfocertSVGUrl from '/./svgs/idp-logos/spid-idp-infocertid.svg';\nimport PosteSVGUrl from '/./svgs/idp-logos/spid-idp-posteid.svg';\nimport SielteSVGUrl from '/./svgs/idp-logos/spid-idp-sielteid.svg';\nimport TimSVGUrl from '/./svgs/idp-logos/spid-idp-timid.svg';\nimport NamirialSVGUrl from '/./svgs/idp-logos/spid-idp-namirialid.svg';\nimport RegisterItSVGUrl from '/./svgs/idp-logos/spid-idp-spiditalia.svg';\nimport LepidaSVGUrl from '/./svgs/idp-logos/spid-idp-lepidaid.svg';\nimport TeamSystemSVGUrl from '/./svgs/idp-logos/spid-idp-teamsystemid.svg';\nimport EtnaSVGUrl from '/./svgs/idp-logos/spid-idp-etnaid.svg';\nimport InfoCamereSVGUrl from '/./svgs/idp-logos/spid-idp-infocamereid.svg';\nimport IntesiSVGUrl from '/./svgs/idp-logos/spid-idp-intesigroupspid.svg';\nimport providersList from './providers_meta.json';\n\nimport type { RegisteredProviderRecord } from './types';\n\n/**\n * This array of images has been carefully ordered alphabetically\n * to do the matching with the metadata from json, until\n * https://github.com/italia/spid-sp-access-button/issues/7 gets resolved\n */\nconst images = [\n  ArubaSVGUrl,\n  InfocertSVGUrl,\n  LepidaSVGUrl,\n  NamirialSVGUrl,\n  PosteSVGUrl,\n  SielteSVGUrl,\n  RegisterItSVGUrl,\n  TeamSystemSVGUrl,\n  TimSVGUrl,\n  EtnaSVGUrl,\n  InfoCamereSVGUrl,\n  IntesiSVGUrl\n];\n\nexport const providers: Readonly<RegisteredProviderRecord>[] = Object.entries(\n  providersList\n)\n  .sort(([idA], [idB]) => idA.localeCompare(idB))\n  .map(([entityName, entityID], i) => ({\n    protocols: ['SAML'],\n    entityName,\n    entityID,\n    active: true,\n    logo: images[i]\n  }));\n","import { ProviderRecord } from '..';\nimport { providers } from './providers';\nimport {\n  ConfigurationGET,\n  ConfigurationPOST,\n  Protocols,\n  RegisteredProviderRecord\n} from './types';\n\n// avoid http/https confusion and centralize this URL\nexport const SPID_URL = 'https://www.spid.gov.it';\n\nexport function mergeProviders(\n  providers: Readonly<RegisteredProviderRecord>[],\n  extraProviders: ProviderRecord[],\n  { sorted }: { sorted?: boolean } = {}\n): RegisteredProviderRecord[] {\n  const mergedList = [\n    ...providers.map((idp) => ({\n      ...idp,\n      active: !extraProviders.length\n    })),\n    ...extraProviders.map((idp) => ({\n      ...idp,\n      protocols: idp.protocols ?? ['SAML'],\n      active: true\n    }))\n  ];\n  if (!sorted) {\n    return mergedList;\n  }\n  return mergedList.sort((idpA, idpB) =>\n    idpA.entityName.localeCompare(idpB.entityName)\n  );\n}\n\nexport function validateURL(url: string | undefined) {\n  if (url == null || url.indexOf('{{idp}}') < 0) {\n    throw Error('URL parameter must contain the \"{{idp}} string');\n  }\n}\n\nexport function isGetMethod(\n  configuration: ConfigurationGET | ConfigurationPOST\n): configuration is ConfigurationGET {\n  return configuration.method.toUpperCase() === 'GET';\n}\n\nfunction dirtyCopy<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj));\n}\n// Used for exporting\n/**\n * Returns a copy of the list of the official providers.\n * @private\n */\nexport const providersCopy = dirtyCopy(providers) as RegisteredProviderRecord[];\n\n/**\n * Returns a copy of the list of the official providers, already shuffled\n */\nexport function getShuffledProviders() {\n  return providersCopy.sort(() => Math.random() - 0.5);\n}\n\nexport function isProviderActive(\n  idp: RegisteredProviderRecord,\n  supported: string[],\n  protocol: Protocols,\n  extraProviders: ProviderRecord[]\n) {\n  const isExtraProviders = extraProviders.some(\n    ({ entityID }) => entityID === idp.entityID\n  );\n  return (\n    supported.indexOf(idp.entityID) > -1 &&\n    idp.protocols.indexOf(protocol) > -1 &&\n    (extraProviders.length === 0 || isExtraProviders) &&\n    idp.active\n  );\n}\n","import type { Languages } from './types';\n\nconst translations = {\n  naviga_indietro: {\n    it: 'Torna indietro',\n    en: 'Go back',\n    de: 'Gehen Sie zurück',\n    es: 'Regresar',\n    fr: 'Revenir'\n  },\n  alt_logo_SPID: {\n    it: 'Logo SPID',\n    en: 'Logo SPID',\n    de: 'Logo SPID',\n    es: 'Logo SPID',\n    fr: 'Logo SPID'\n  },\n  scegli_provider_SPID: {\n    it: 'Scegli il tuo provider SPID',\n    en: 'Choose your SPID provider',\n    de: 'Wähle Ihren SPIDProvider',\n    es: 'Escoge tu proveedor SPID',\n    fr: 'Choisissez votre fournisseur SPID'\n  },\n  annulla_accesso: {\n    it: 'Annulla',\n    en: 'Cancel',\n    de: 'Zurücknehmen',\n    es: 'Cancelar',\n    fr: 'Annuler'\n  },\n  non_hai_SPID: {\n    it: 'Non hai SPID?',\n    en: \"Don't have SPID?\",\n    de: 'Haben Sie nicht SPID?',\n    es: 'No tiene SPID?',\n    fr: \"Vous ñ'avez pas de SPID?\"\n  },\n  cosa_SPID: {\n    it: \"Cos'è SPID?\",\n    en: 'What is SPID?',\n    de: 'Was ist SPID?',\n    es: 'Qué es SPID?',\n    fr: 'Qu’est-ce que SPID?'\n  },\n  entra_con_SPID: {\n    it: 'Entra con SPID',\n    en: 'Sign in with SPID',\n    de: 'Loggen Sie mit SPID',\n    es: 'Ingresa con SPID',\n    fr: 'Connectez-vous avec SPID'\n  },\n  scopri_di_piu: {\n    it: 'Scopri di più.',\n    en: 'Learn more.',\n    de: 'Finde mehr heraus.',\n    es: 'Saber más',\n    fr: 'En savoir plus.'\n  },\n  accedi_con_idp: {\n    it: 'Accedi a SPID con {0}',\n    en: 'Access to SPID with {0}',\n    de: 'Zugriff auf SPID mit {0}',\n    es: 'Accede a SPID con {0}',\n    fr: 'Accès à SPID avec {0}'\n  },\n  idp_disabled: {\n    it: 'Provider non attivo',\n    en: 'Provider not enabled',\n    de: 'Provider nicht aktiviert',\n    es: 'Proveedor no disponible',\n    fr: 'Fournisseur non activé'\n  },\n  maggiori_info: {\n    it: 'Maggiori info',\n    en: 'More info',\n    de: 'Mehr info',\n    es: 'Más información',\n    fr: 'Plus d’info'\n  }\n} as const;\nconst placeholderRegex = /\\{\\d}/;\n\nexport type labelKeys = keyof typeof translations;\n\nexport type TranslateFn = (\n  labelKey: labelKeys,\n  placeholderValue?: string\n) => string;\n\nlet currentLang = 'it';\nexport const getTranslationFn = (language: Languages): TranslateFn => {\n  currentLang = language;\n  return (labelKey: labelKeys, placeholderValue?: string) => {\n    const text = translations[labelKey] && translations[labelKey][currentLang];\n    if (!text) {\n      throw Error(\n        `labelKey ${labelKey} non presente per la lingua selezionata ${currentLang}`\n      );\n    }\n    if (placeholderValue != null) {\n      return text.replace(placeholderRegex, placeholderValue);\n    }\n    return text;\n  };\n};\n/**\n * Returns the list of supported languages for the UI\n */\nexport const getSupportedLanguages = (): Languages[] =>\n  Object.keys(Object.values(translations)[0]) as Languages[];\n","export const DEFAULT_TRANSITION_TIME = 2000;\nexport const BUTTON_DELAY_TIME = 1.1;\nexport const DELAY_STEP = 0.1;\n\nexport const possibleStates = {\n  INIT: { type: 'init' },\n  ENTERING: { type: 'entering' },\n  ENTERED: { type: 'entered' },\n  EXITING: { type: 'exiting' },\n  EXITED: { type: 'exited' }\n} as const;\n\nexport const panelAnimClass = 'spid-button-panel-anim';\nexport const logoAnimationOutClass = 'spid-button-logo-animation-out';\nexport const emptyClass = '';\nexport const buttonIconAnimationClass = 'spid-button-icon-animation';\n\nexport const sizeMapping = {\n  sm: 'small',\n  md: 'medium',\n  l: 'large'\n};\n","import { SPIDButtonProps } from '../shared/types';\nimport {\n  buttonIconAnimationClass,\n  possibleStates,\n  sizeMapping,\n  emptyClass\n} from './constants';\nimport { ModalState } from './types';\n\nimport styles from './index.module.css';\nimport extraStyles from './extra.module.css';\n\n// the css module is fake for the modal, so we can just centralize the renaming logic here\nexport function getDefinedClasses(klasses: (string | undefined)[]) {\n  return klasses\n    .map(\n      (klass) => (klass && (styles[klass] || extraStyles[klass])) || emptyClass\n    )\n    .join(' ');\n}\n\n// do not wrap these results with the getDefinedClasses yet as they will be wrapped later on\n// on the components\ntype classesProps = Pick<\n  SPIDButtonProps,\n  'theme' | 'corners' | 'size' | 'fluid'\n>;\nexport function computeButtonClasses({\n  theme,\n  corners,\n  size,\n  fluid\n}: classesProps): string[] {\n  if (process.env.NODE_ENV === 'production') {\n    if (size === 'xl') {\n      console.log(\n        'Size \"xl\" is not supported by SPID React Button with Modal variant'\n      );\n    }\n  }\n  return [\n    theme,\n    corners,\n    size ? `size-${sizeMapping[size] || 'large'}` : null,\n    fluid ? 'fluid' : null\n  ]\n    .map((type) => (type != null ? `spid-button-${type}` : ''))\n    .filter(Boolean);\n}\n\nconst emptyClasses: string[] = [];\nexport function computeButtonTransitionClasses({\n  type\n}: ModalState): { wrapper: string[]; icon: string[] } {\n  const inClass = 'in';\n  switch (type) {\n    case possibleStates.ENTERING.type:\n      return {\n        wrapper: ['spid-button-transition'],\n        icon: [buttonIconAnimationClass, inClass]\n      };\n    case possibleStates.ENTERED.type:\n      return {\n        wrapper: emptyClasses,\n        icon: [buttonIconAnimationClass, inClass]\n      };\n    case possibleStates.EXITING.type:\n      return {\n        wrapper: ['spid-button-reverse-enter-transition'],\n        icon: [buttonIconAnimationClass]\n      };\n    case possibleStates.EXITED.type:\n      return { wrapper: emptyClasses, icon: [buttonIconAnimationClass] };\n    case possibleStates.INIT.type:\n      return { wrapper: emptyClasses, icon: emptyClasses };\n  }\n}\n\nexport function isVisible(modalState: ModalState) {\n  return modalState.type.includes('enter');\n}\n","import React, { useRef, useEffect } from 'react';\n\nimport { isGetMethod } from './utils';\n\nimport type { TranslateFn } from './i18n';\nimport type { RegisteredProviderRecord, SPIDButtonProps, Types } from './types';\n\nimport styles from './ProviderButton.module.css';\n\ntype ProviderButtonProps = Required<\n  Pick<SPIDButtonProps, 'url' | 'mapping' | 'configuration' | 'type'>\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    idp: RegisteredProviderRecord;\n    isActive: boolean;\n    i18n: TranslateFn;\n    className: string;\n    firstFocus: boolean;\n  };\nexport const SharedProviderButton = ({\n  idp,\n  configuration,\n  url,\n  isActive,\n  mapping,\n  i18n,\n  onProviderClicked,\n  className,\n  type,\n  firstFocus\n}: ProviderButtonProps) => {\n  const idpRef = useRef<HTMLAnchorElement | HTMLButtonElement | null>(null);\n  const entityID =\n    idp.entityID in mapping ? mapping[idp.entityID] : idp.entityID;\n  const actionURL = url.replace('{{idp}}', encodeURIComponent(entityID));\n  const linkTitle = isActive\n    ? i18n('accedi_con_idp', idp.entityName)\n    : i18n('idp_disabled');\n\n  const loginURL = isActive ? actionURL : undefined;\n\n  useEffect(() => {\n    if (firstFocus && idpRef.current) {\n      idpRef.current.focus();\n    }\n  }, [idpRef]);\n\n  if (isGetMethod(configuration)) {\n    return (\n      <a\n        ref={(el) => (idpRef.current = el)}\n        title={linkTitle}\n        href={loginURL}\n        // @ts-expect-error\n        disabled={!isActive}\n        className={type === 'modal' ? '' : className}\n        onClick={(e) =>\n          onProviderClicked && onProviderClicked(idp, loginURL, e)\n        }\n        role='link'\n        id={entityID}\n      >\n        <ProviderButtonContent idp={idp} title={linkTitle} type={type} />\n      </a>\n    );\n  }\n  return (\n    <form name='spid_idp_access' action={actionURL} method='POST'>\n      <button\n        ref={(el) => (idpRef.current = el)}\n        className={className}\n        id={entityID}\n        name={linkTitle}\n        title={linkTitle}\n        type='submit'\n        onClick={(e) => {\n          if (!isActive) {\n            e.preventDefault();\n          }\n          return onProviderClicked && onProviderClicked(idp, loginURL, e);\n        }}\n        disabled={!isActive}\n      >\n        <ProviderButtonContent idp={idp} title={linkTitle} type={type} />\n      </button>\n      <input type='hidden' name={configuration.fieldName} value={entityID} />\n      {Object.entries(configuration.extraFields || {}).map(\n        ([inputName, inputValue]) => {\n          return (\n            <input\n              key={inputName}\n              type='hidden'\n              name={inputName}\n              value={inputValue}\n            />\n          );\n        }\n      )}\n    </form>\n  );\n};\n\nconst ProviderButtonContent = ({\n  idp,\n  title,\n  type\n}: {\n  idp: RegisteredProviderRecord;\n  title: string;\n  type: Types;\n}) => {\n  if (idp.logo == null) {\n    return <span>{idp.entityName}</span>;\n  }\n  return (\n    <span>\n      <span className={styles.srOnly}>{title}</span>\n      <img\n        src={idp.logo}\n        alt={idp.entityName}\n        title={idp.entityName}\n        style={type === 'modal' ? { maxWidth: '90%' } : {}}\n      />\n    </span>\n  );\n};\n","import React from 'react';\nimport { FocusOn } from 'react-focus-on';\n\nimport SpidLogoAnimationBlackUrl from '/../shared/svgs/spid-logo-animation-black.svg';\nimport SpidLogoUrl from '/../shared/svgs/spid-logo.svg';\nimport CloseSvgUrl from '/../shared/svgs/close.svg';\n\nimport type {\n  RegisteredProviderRecord,\n  SPIDButtonProps\n} from '../shared/types';\n\nimport {\n  BUTTON_DELAY_TIME,\n  DELAY_STEP,\n  emptyClass,\n  logoAnimationOutClass,\n  panelAnimClass,\n  possibleStates\n} from './constants';\nimport type { ModalState } from './types';\nimport { isProviderActive, SPID_URL } from '../shared/utils';\nimport { isVisible, getDefinedClasses } from './utils';\nimport { TranslateFn } from '../shared/i18n';\n\nimport { SharedProviderButton } from '../shared/ProviderButton';\n\nconst ButtonImage = ({ url, altText }: { url: string; altText: string }) => (\n  <img aria-hidden='true' src={url} alt={altText} style={{ float: 'left' }} />\n);\n\nfunction getModalClasses({ type }: ModalState) {\n  const fadeInLeftClass = 'spid-button-fade-in-left';\n  switch (type) {\n    case possibleStates.ENTERING.type:\n      return {\n        panel: panelAnimClass,\n        buttonLogo: fadeInLeftClass,\n        buttonClose: fadeInLeftClass\n      };\n    case possibleStates.EXITING.type:\n      return {\n        panel: panelAnimClass,\n        buttonManIcon: logoAnimationOutClass\n      };\n    case possibleStates.ENTERED.type:\n    case possibleStates.EXITED.type:\n    case possibleStates.INIT.type: {\n      return {};\n    }\n  }\n}\n\ntype ProvidersModalProps = Required<\n  Pick<\n    SPIDButtonProps,\n    | 'supported'\n    | 'protocol'\n    | 'url'\n    | 'mapping'\n    | 'configuration'\n    | 'extraProviders'\n  >\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    i18n: TranslateFn;\n    visibility: ModalState;\n    providers: RegisteredProviderRecord[];\n    closeModal: () => void;\n  };\nexport const ProvidersModal = ({\n  i18n,\n  mapping,\n  visibility,\n  extraProviders = [],\n  supported,\n  providers,\n  protocol,\n  url,\n  closeModal,\n  configuration,\n  onProviderClicked\n}: ProvidersModalProps) => {\n  const {\n    panel: panelClasses,\n    buttonClose: buttonCloseClasses,\n    buttonLogo: buttonLogoClasses,\n    buttonManIcon: buttonManIconClasses\n  } = getModalClasses(visibility);\n\n  return (\n    <FocusOn\n      onClickOutside={closeModal}\n      onEscapeKey={closeModal}\n      enabled={isVisible(visibility)}\n    >\n      <section\n        className={getDefinedClasses(['spid-enter-container'])}\n        hidden={!isVisible(visibility)}\n        aria-modal='true'\n      >\n        <div className={getDefinedClasses(['spid-enter'])}>\n          <section\n            className={getDefinedClasses([\n              'spid-button-panel',\n              'spid-button-panel-select',\n              panelClasses\n            ])}\n            aria-label={i18n('scegli_provider_SPID')}\n            tabIndex={0}\n          >\n            <header className={getDefinedClasses(['spid-button-header'])}>\n              <div className={getDefinedClasses(['spid-button-panel-back'])}>\n                <div\n                  className={getDefinedClasses([\n                    'spid-button-logo',\n                    buttonLogoClasses\n                  ])}\n                >\n                  <ButtonImage\n                    url={SpidLogoUrl}\n                    altText={i18n('alt_logo_SPID')}\n                  />\n                </div>\n                <div\n                  className={getDefinedClasses([\n                    'spid-button-close-button',\n                    'spid-button-fade-out-right',\n                    buttonCloseClasses\n                  ])}\n                >\n                  <button\n                    tabIndex={0}\n                    className={getDefinedClasses([\n                      'spid-button-panel-close-button',\n                      'spid-button-navigable'\n                    ])}\n                    aria-label={i18n('naviga_indietro')}\n                    onClick={closeModal}\n                  >\n                    <ButtonImage\n                      url={CloseSvgUrl}\n                      altText={i18n('naviga_indietro')}\n                    />\n                  </button>\n                </div>\n              </div>\n            </header>\n            <div className={getDefinedClasses(['spid-button-panel-content'])}>\n              <img\n                className={getDefinedClasses([\n                  'spid-button-little-man-icon',\n                  buttonManIconClasses\n                ])}\n                src={SpidLogoAnimationBlackUrl}\n                alt={i18n('entra_con_SPID')}\n              />\n              <div\n                className={getDefinedClasses([\n                  'spid-button-panel-content-center'\n                ])}\n              >\n                <h1\n                  className={getDefinedClasses([\n                    'spid-enter-title-page',\n                    'spid-button-fade-in-bottom',\n                    'spid-button-fade-out-bottom'\n                  ])}\n                >\n                  {i18n('scegli_provider_SPID')}\n                </h1>\n                <div className={getDefinedClasses(['spid-idp-list'])}>\n                  {providers.map((idp, i) => {\n                    const isActive = isProviderActive(\n                      idp,\n                      supported,\n                      protocol,\n                      extraProviders\n                    );\n                    const {\n                      classNames,\n                      style\n                    }: {\n                      classNames: string;\n                      style?: Record<string, string>;\n                    } =\n                      visibility.type === possibleStates.ENTERING.type\n                        ? {\n                            classNames: 'spid-button-idp-fade-in',\n                            style: {\n                              animationDelay: `${\n                                BUTTON_DELAY_TIME + DELAY_STEP * (i + 1)\n                              }s`\n                            }\n                          }\n                        : { classNames: emptyClass };\n\n                    return (\n                      <span\n                        key={idp.entityID}\n                        className={getDefinedClasses([\n                          'spid-button-idp',\n                          classNames\n                        ])}\n                        style={style}\n                      >\n                        <SharedProviderButton\n                          idp={idp}\n                          mapping={mapping}\n                          url={url}\n                          isActive={isActive}\n                          i18n={i18n}\n                          configuration={configuration}\n                          onProviderClicked={onProviderClicked}\n                          className={getDefinedClasses([\n                            'spid-button-idp-button'\n                          ])}\n                          type='modal'\n                          firstFocus={i === 0}\n                        />\n                      </span>\n                    );\n                  })}\n                </div>\n                <div className={getDefinedClasses(['spid-non-hai-spid'])}>\n                  {i18n('non_hai_SPID')}{' '}\n                  <a\n                    href={SPID_URL + '/richiedi-spid'}\n                    target='_blank noreferrer'\n                  >\n                    {i18n('scopri_di_piu')}\n                  </a>\n                </div>\n              </div>\n              <div className={getDefinedClasses(['spid-foot-btn'])}>\n                <button\n                  className={getDefinedClasses(['spid-cancel-access-button'])}\n                  onClick={closeModal}\n                >\n                  {i18n('annulla_accesso')}\n                </button>\n              </div>\n            </div>\n          </section>\n        </div>\n      </section>\n    </FocusOn>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport SpidIcoCircleLbUrl from '/../shared/svgs/spid-ico-circle-lb.svg';\nimport SpidIcoCircleBbUrl from '/../shared/svgs/spid-ico-circle-bb.svg';\n\nimport { getTranslationFn } from '../shared/i18n';\nimport {\n  computeButtonClasses,\n  computeButtonTransitionClasses,\n  isVisible,\n  getDefinedClasses\n} from './utils';\n\nimport { DEFAULT_TRANSITION_TIME, possibleStates } from './constants';\nimport {\n  mergeProviders,\n  validateURL,\n  getShuffledProviders\n} from '../shared/utils';\nimport { ProvidersModal } from './ProvidersModal';\n\nimport type { TranslateFn } from '../shared/i18n';\nimport type { SPIDButtonProps } from '../shared/types';\nimport type { ModalState } from './types';\n\nconst providersList = getShuffledProviders();\n\nconst LoginButton = ({\n  i18n,\n  theme,\n  corners,\n  fluid,\n  size,\n  toggleModal,\n  modalVisibility\n}: Pick<SPIDButtonProps, 'theme' | 'corners' | 'fluid' | 'size'> & {\n  i18n: TranslateFn;\n  modalVisibility: ModalState;\n  toggleModal: (prevState: boolean) => void;\n}) => {\n  const customStylingClasses = computeButtonClasses({\n    theme,\n    corners,\n    size,\n    fluid\n  });\n  const {\n    wrapper: wrapperTransitionClasses,\n    icon: iconButtonClasses\n  } = computeButtonTransitionClasses(modalVisibility);\n  const buttonImageUrl =\n    theme === 'negative' ? SpidIcoCircleLbUrl : SpidIcoCircleBbUrl;\n  return (\n    <button\n      className={getDefinedClasses([\n        'spid-button',\n        ...customStylingClasses,\n        ...wrapperTransitionClasses\n      ])}\n      onClick={() => toggleModal(true)}\n    >\n      <span\n        aria-hidden={!isVisible(modalVisibility)}\n        className={getDefinedClasses([\n          'spid-button-icon',\n          ...iconButtonClasses\n        ])}\n      >\n        <img\n          src={buttonImageUrl}\n          alt='Login logo'\n          className={getDefinedClasses(['spid-button-image-fix'])}\n        />\n      </span>\n      <span className={getDefinedClasses(['spid-button-text'])}>\n        {i18n('entra_con_SPID')}\n      </span>\n    </button>\n  );\n};\n\n/**\n * The specific component button with the modal.\n * Use this component when you want to minimize the footprint in your project.\n * It accepts the same props as the main component. The `type` prop is ignored in this case.\n *\n * @param props\n */\nexport const SPIDReactButton = ({\n  lang = 'it',\n  extraProviders = [],\n  corners = 'rounded',\n  fluid = true,\n  size = 'md',\n  theme = 'positive',\n  configuration = { method: 'GET' },\n  mapping = {},\n  protocol = 'SAML',\n  url,\n  sorted = false,\n  supported = providersList.map(({ entityID }) => entityID),\n  onProvidersShown,\n  onProvidersHidden,\n  onProviderClicked\n}: SPIDButtonProps) => {\n  const [state, setState] = useState<ModalState>(possibleStates.INIT);\n\n  useEffect(() => {\n    if (state.type === possibleStates.ENTERING.type) {\n      if (onProvidersShown) {\n        onProvidersShown();\n      }\n    }\n    if (state.type === possibleStates.EXITING.type) {\n      if (onProvidersHidden) {\n        onProvidersHidden();\n      }\n    }\n  }, [state]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (state.type === possibleStates.ENTERING.type) {\n      timer = setTimeout(\n        () => setState(possibleStates.ENTERED),\n        DEFAULT_TRANSITION_TIME\n      );\n    }\n    if (state.type === possibleStates.EXITING.type) {\n      timer = setTimeout(\n        () => setState(possibleStates.EXITED),\n        DEFAULT_TRANSITION_TIME\n      );\n    }\n    return () => {\n      if (timer != null) {\n        clearTimeout(timer);\n      }\n    };\n  }, [state]);\n\n  validateURL(url);\n\n  const translateFn = getTranslationFn(lang);\n\n  const moreLoginProps = {\n    theme,\n    corners,\n    fluid,\n    size\n  };\n\n  const moreModalProps = {\n    extraProviders,\n    configuration,\n    url,\n    mapping,\n    protocol,\n    supported,\n    onProviderClicked\n  };\n\n  const mergedProviders = mergeProviders(providersList, extraProviders, {\n    sorted\n  });\n\n  return (\n    <div aria-live='polite'>\n      <ProvidersModal\n        visibility={state}\n        i18n={translateFn}\n        providers={mergedProviders}\n        closeModal={() => setState(possibleStates.EXITING)}\n        {...moreModalProps}\n      />\n      <LoginButton\n        modalVisibility={state}\n        i18n={translateFn}\n        toggleModal={(open: boolean) =>\n          setState(open ? possibleStates.ENTERING : possibleStates.EXITING)\n        }\n        {...moreLoginProps}\n      />\n    </div>\n  );\n};\n","export const sizeMapping = {\n  sm: 'small',\n  md: 'medium',\n  l: 'large',\n  xl: 'extraLarge'\n} as const;\n","import { sizeMapping } from './constants';\n\nimport type { Sizes } from '../shared/types';\n\nexport const getButtonSizeClass = (size: Sizes | 'xl') => {\n  return sizeMapping[size];\n};\n\nexport const getIdpButtonSizeClass = (size: Sizes | 'xl') => {\n  const currentSize = sizeMapping[size];\n  return 'idpButton' + currentSize[0].toUpperCase() + currentSize.slice(1);\n};\n","import React from 'react';\n\nimport { isProviderActive, SPID_URL } from '../shared/utils';\nimport { getIdpButtonSizeClass } from './util';\n\nimport type { TranslateFn } from '../shared/i18n';\nimport type {\n  RegisteredProviderRecord,\n  SPIDButtonProps\n} from '../shared/types';\n\nimport styles from './index.module.css';\nimport { SharedProviderButton } from '../shared/ProviderButton';\n\ntype ProvidersDropdownProps = Required<\n  Pick<\n    SPIDButtonProps,\n    | 'url'\n    | 'supported'\n    | 'mapping'\n    | 'size'\n    | 'configuration'\n    | 'protocol'\n    | 'extraProviders'\n  >\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    i18n: TranslateFn;\n    providers: RegisteredProviderRecord[];\n  };\nexport const ProvidersDropdown = ({\n  configuration,\n  supported,\n  url,\n  mapping,\n  i18n,\n  size,\n  protocol,\n  providers,\n  extraProviders,\n  onProviderClicked\n}: ProvidersDropdownProps) => {\n  return (\n    <div\n      className={`${styles.idpButton} ${styles.idpButtonTip} ${\n        styles[getIdpButtonSizeClass(size)]\n      }`}\n      aria-modal='true'\n    >\n      <ul\n        className={styles.idpButtonMenu}\n        aria-label={i18n('scegli_provider_SPID')}\n      >\n        {providers.map((idp, i) => {\n          const isActive = isProviderActive(\n            idp,\n            supported,\n            protocol,\n            extraProviders\n          );\n\n          const buttonClasses = `${styles.idpLogo} ${\n            isActive ? '' : styles.disabled\n          }`;\n          return (\n            <li data-idp={idp.entityName} key={idp.entityName}>\n              <SharedProviderButton\n                idp={idp}\n                url={url}\n                isActive={isActive}\n                mapping={mapping}\n                i18n={i18n}\n                configuration={configuration}\n                onProviderClicked={onProviderClicked}\n                className={buttonClasses}\n                type='dropdown'\n                firstFocus={i === 0}\n              />\n            </li>\n          );\n        })}\n        <li className={styles.supportLink}>\n          <a href={SPID_URL} target='_blank noreferrer'>\n            {i18n('maggiori_info')}\n          </a>\n        </li>\n        <li className={styles.supportLink}>\n          <a href={SPID_URL + '/#registrati'} target='_blank noreferrer'>\n            {i18n('non_hai_SPID')}\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { FocusOn } from 'react-focus-on';\n\nimport SpidIcoCircleBbUrl from '/../shared/svgs/spid-ico-circle-bb.svg';\nimport SpidIcoCircleLbUrl from '/../shared/svgs/spid-ico-circle-lb.svg';\nimport { getTranslationFn } from '../shared/i18n';\nimport { SPIDButtonProps } from '../shared/types';\nimport {\n  validateURL,\n  getShuffledProviders,\n  mergeProviders\n} from '../shared/utils';\n\nimport styles from './index.module.css';\nimport { ProvidersDropdown } from './ProvidersMenu';\nimport { getButtonSizeClass } from './util';\n\nconst shuffledProviders = getShuffledProviders();\n/**\n * The specific component button with the dropdown.\n * Use this component when you want to minimize the footprint in your project.\n * It accepts the same props as the main component. The `type` prop is ignored in this case.\n *\n * @param props\n */\nexport const SPIDReactButton = ({\n  url,\n  lang = 'it',\n  supported = shuffledProviders.map(({ entityID }) => entityID),\n  mapping = {},\n  size = 'md',\n  configuration = { method: 'GET' },\n  theme = 'positive',\n  protocol = 'SAML',\n  sorted = false,\n  extraProviders = [],\n  onProviderClicked,\n  onProvidersHidden,\n  onProvidersShown\n}: SPIDButtonProps) => {\n  const [openDropdown, toggleDropdown] = useState<boolean | undefined>(\n    undefined\n  );\n\n  const i18n = getTranslationFn(lang);\n\n  useEffect(() => {\n    if (openDropdown && onProvidersShown) {\n      onProvidersShown();\n    }\n    if (openDropdown === false && onProvidersHidden) {\n      onProvidersHidden();\n    }\n  }, [openDropdown]);\n\n  validateURL(url);\n\n  const mergedProviders = mergeProviders(shuffledProviders, extraProviders, {\n    sorted\n  });\n\n  const buttonImageUrl =\n    theme === 'negative' ? SpidIcoCircleLbUrl : SpidIcoCircleBbUrl;\n\n  return (\n    <FocusOn\n      onClickOutside={() => toggleDropdown(false)}\n      onEscapeKey={() => toggleDropdown(false)}\n      scrollLock={false}\n      enabled={openDropdown}\n    >\n      <div className={styles.container}>\n        <a\n          href='#'\n          className={`${styles.button} ${styles[getButtonSizeClass(size)]} ${\n            theme === 'positive' ? styles.theme : styles.themeNegative\n          }`}\n          aria-haspopup='true'\n          aria-expanded={openDropdown}\n          onClick={() => toggleDropdown(!openDropdown)}\n        >\n          <span className={styles.buttonIcon}>\n            <img src={buttonImageUrl} alt='Login logo' />\n          </span>\n          <span className={styles.buttonText}>{i18n('entra_con_SPID')}</span>\n        </a>\n        {openDropdown && (\n          <ProvidersDropdown\n            supported={supported}\n            url={url}\n            mapping={mapping}\n            i18n={i18n}\n            size={size}\n            configuration={configuration}\n            protocol={protocol}\n            providers={mergedProviders}\n            extraProviders={extraProviders}\n            onProviderClicked={onProviderClicked}\n          />\n        )}\n      </div>\n    </FocusOn>\n  );\n};\n","import React from 'react';\n\nimport { SPIDReactButton as SPIDReactButtonModal } from './modalVariant';\nimport { SPIDReactButton as SPIDReactButtonDropdown } from './dropdownVariant';\nimport type { SPIDButtonProps } from './shared/types';\n/**\n * The main component for the button.\n * Use this component with the `type` prop to select the version you prefer.\n * @param props\n */\nexport const SPIDReactButton = (props: SPIDButtonProps) => {\n  if (!props.type || props.type === 'modal') {\n    return <SPIDReactButtonModal {...props} />;\n  }\n  return <SPIDReactButtonDropdown {...props} />;\n};\n"],"names":["images","ArubaSVGUrl","InfocertSVGUrl","LepidaSVGUrl","NamirialSVGUrl","PosteSVGUrl","SielteSVGUrl","RegisterItSVGUrl","TeamSystemSVGUrl","TimSVGUrl","EtnaSVGUrl","InfoCamereSVGUrl","IntesiSVGUrl","providers","Object","entries","providersList","sort","idA","idB","localeCompare","map","i","entityName","entityID","protocols","active","logo","SPID_URL","mergeProviders","extraProviders","sorted","mergedList","idp","length","idpA","idpB","validateURL","url","indexOf","Error","isGetMethod","configuration","method","toUpperCase","dirtyCopy","obj","JSON","parse","stringify","providersCopy","getShuffledProviders","Math","random","isProviderActive","supported","protocol","isExtraProviders","some","translations","naviga_indietro","it","en","de","es","fr","alt_logo_SPID","scegli_provider_SPID","annulla_accesso","non_hai_SPID","cosa_SPID","entra_con_SPID","scopri_di_piu","accedi_con_idp","idp_disabled","maggiori_info","placeholderRegex","currentLang","getTranslationFn","language","labelKey","placeholderValue","text","replace","getSupportedLanguages","keys","values","DEFAULT_TRANSITION_TIME","BUTTON_DELAY_TIME","DELAY_STEP","possibleStates","INIT","type","ENTERING","ENTERED","EXITING","EXITED","panelAnimClass","logoAnimationOutClass","emptyClass","buttonIconAnimationClass","sizeMapping","sm","md","l","getDefinedClasses","klasses","klass","styles","extraStyles","join","computeButtonClasses","theme","corners","size","fluid","process","env","NODE_ENV","console","log","filter","Boolean","emptyClasses","computeButtonTransitionClasses","inClass","wrapper","icon","isVisible","modalState","includes","SharedProviderButton","isActive","mapping","i18n","onProviderClicked","className","firstFocus","idpRef","useRef","actionURL","encodeURIComponent","linkTitle","loginURL","undefined","useEffect","current","focus","React","ref","el","title","href","disabled","onClick","e","role","id","ProviderButtonContent","name","action","preventDefault","fieldName","value","extraFields","inputName","inputValue","key","srOnly","src","alt","style","maxWidth","ButtonImage","altText","getModalClasses","fadeInLeftClass","panel","buttonLogo","buttonClose","buttonManIcon","ProvidersModal","visibility","closeModal","panelClasses","buttonCloseClasses","buttonLogoClasses","buttonManIconClasses","FocusOn","onClickOutside","onEscapeKey","enabled","hidden","tabIndex","SpidLogoUrl","CloseSvgUrl","SpidLogoAnimationBlackUrl","classNames","animationDelay","target","LoginButton","toggleModal","modalVisibility","customStylingClasses","wrapperTransitionClasses","iconButtonClasses","buttonImageUrl","SpidIcoCircleLbUrl","SpidIcoCircleBbUrl","SPIDReactButton","lang","onProvidersShown","onProvidersHidden","useState","state","setState","timer","setTimeout","clearTimeout","translateFn","moreLoginProps","moreModalProps","mergedProviders","open","xl","getButtonSizeClass","getIdpButtonSizeClass","currentSize","slice","ProvidersDropdown","idpButton","idpButtonTip","idpButtonMenu","buttonClasses","idpLogo","supportLink","shuffledProviders","openDropdown","toggleDropdown","scrollLock","container","button","themeNegative","buttonIcon","buttonText","props","SPIDReactButtonModal","SPIDReactButtonDropdown"],"mappings":"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"}